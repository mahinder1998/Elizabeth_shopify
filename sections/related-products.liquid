<div class="related py-20 px-5">
    <div class="container mx-auto"> 
        <h2 class="text-center text-2xl mb-10">{{section.settings.heading}}</h2>

        <div class="related-products grid md:grid-cols-3 justify-between space-y-5 md:space-x-5 md:space-y-0">
        </div>
    </div>
</div>

<script>

    {% if cart.item_count > 0 %}
        {% assign relatedID = cart.items[0].product_id %}
    {%else%}
        {% assign relatedID = 9841414471989 %}
    {%endif%}

    function formatMoney(cents, format) {
        if (typeof cents == 'string') { cents = cents.replace('.',''); }
        var value = '';
        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
        var formatString = (format || this.money_format);
    
        function defaultOption(opt, def) {
        return (typeof opt == 'undefined' ? def : opt);
        }
    
        function formatWithDelimiters(number, precision, thousands, decimal) {
        precision = defaultOption(precision, 2);
        thousands = defaultOption(thousands, ',');
        decimal   = defaultOption(decimal, '.');
    
        if (isNaN(number) || number == null) { return 0; }
    
        number = (number/100.0).toFixed(precision);
    
        var parts   = number.split('.'),
            dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
            cents   = parts[1] ? (decimal + parts[1]) : '';
    
        return dollars + cents;
        }
    
        switch(formatString.match(placeholderRegex)[1]) {
        case 'amount':
            value = formatWithDelimiters(cents, 2);
            break;
        case 'amount_no_decimals':
            value = formatWithDelimiters(cents, 0);
            break;
        case 'amount_with_comma_separator':
            value = formatWithDelimiters(cents, 2, '.', ',');
            break;
        case 'amount_no_decimals_with_comma_separator':
            value = formatWithDelimiters(cents, 0, '.', ',');
            break;
        }
    
        return formatString.replace(placeholderRegex, value);
    };


    function buildBlock(product){
        const formattedPrice =  formatMoney(product.price, "{{shop.money_format}}");
        const html = `
            <a class="related-product" href="${product.url}">
                <img src="${product.images[0]}" class="rounded-xl"/>
                <h3 class="text-xl my-2">${product.title}</h3>
                <span>${formattedPrice}</span>
                <form method="post" action="/cart/add">
                    <input name="id" type="hidden" value="${product.variants[0].id}">
                    <input type="hidden" min="1" type="number" id="quantity" name="quantity" value="1"/>
                    <input type="submit" value="Add to cart" class="button bg-black p-2 inline-block text-white rounded-md mt-2 hover:bg-orange-500 transition-all cursor-pointer w-full"/>
                </form>
            </a>
        `
        return html;
    }

    // fetch product
    fetch(window.Shopify.routes.root + "recommendations/products.json?product_id={{relatedID}}&limit=3")
    .then(response => response.json())
    .then(({ products }) => {
            console.log(products, "products");
            products.forEach(product=>{
            const html =  buildBlock(product);
            document.querySelector(".related-products").innerHTML += html;
            })
        }
    );
</script>

{%schema%}
    {
        "name": "Related products",
        "settings": [
            {
                "type": "text",
                "id":"heading",
                "label": "heading",
                "default": "You may also like"
            }
        ],
        "presets":[
            {
                "name": "Related products"
            }
        ]
    }
{%endschema%}